const fs = require("fs");
const prompt = require("prompt-sync")();
const {
    loadDepartment, loadStatus, loadProgram, loadRule,
    saveDepartments, saveStatuses, savePrograms
} = require("./utils");

function addEntity(loadFunc, saveFunc, entityName, keyName) {
    console.log("Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa h·ªçc T·ª± nhi√™n, ƒêHQG-HCM");
    const entities = loadFunc();
    const rule = loadRule();

    const newValue = (prompt(`Nh·∫≠p t√™n ${entityName} m·ªõi: `) || "").trim();
    if (!newValue) {
        console.log(`üö® Kh√¥ng th√™m ${entityName} do t√™n tr·ªëng`);
        return;
    }

    if (rule && entities.some(e => e[keyName].toLowerCase() === newValue.toLowerCase())) {
        console.log(`üö® ${entityName} ƒë√£ t·ªìn t·∫°i, kh√¥ng th·ªÉ th√™m!`);
        return;
    }

    entities.push({ [keyName]: newValue });
    saveFunc(entities);
    console.log(`ƒê√£ th√™m ${entityName} th√†nh c√¥ng!`);
}

function renameEntity(loadFunc, saveFunc, entityName, keyName) {
    console.log("Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa h·ªçc T·ª± nhi√™n, ƒêHQG-HCM");
    const entities = loadFunc();
    const rule = loadRule();

    const oldValue = (prompt(`Nh·∫≠p t√™n c≈© c·ªßa ${entityName}: `) || "").trim();
    const entity = entities.find(e => e[keyName] === oldValue);

    if (!entity) {
        console.log(`üö® Kh√¥ng t√¨m th·∫•y ${entityName}!`);
        return;
    }

    const newValue = (prompt(`Nh·∫≠p t√™n m·ªõi c·ªßa ${entityName}: `) || "").trim();
    if (!newValue) {
        console.log(`üö® Kh√¥ng ƒë·ªïi t√™n ${entityName} do t√™n tr·ªëng`);
        return;
    }

    if (rule && entities.some(e => e[keyName].toLowerCase() === newValue.toLowerCase())) {
        console.log(`üö® ${entityName} ƒë√£ t·ªìn t·∫°i, kh√¥ng th·ªÉ ƒë·ªïi t√™n th√†nh!`);
        return;
    }

    entity[keyName] = newValue;
    saveFunc(entities);
    console.log(`C·∫≠p nh·∫≠t ${entityName} th√†nh c√¥ng!`);
}

function changeRule() {
    console.log("Tr∆∞·ªùng ƒê·∫°i h·ªçc Khoa h·ªçc T·ª± nhi√™n, ƒêHQG-HCM");
    let rules = loadRule();

    if (!rules || rules.length === 0) {
        console.log("üö® Kh√¥ng t√¨m th·∫•y quy t·∫Øc n√†o trong file!");
        return;
    }

    rules[0].rulesEnabled = !rules[0].rulesEnabled;
    fs.writeFileSync("./data/rule.json", JSON.stringify(rules, null, 4), "utf-8");
    console.log(`‚úÖ Quy t·∫Øc ƒë√£ ƒë·ªïi th√†nh: ${rules[0].rulesEnabled}`);
}

const addDepartment = () => addEntity(loadDepartment, saveDepartments, "Khoa", "Department");
const renameDepartment = () => renameEntity(loadDepartment, saveDepartments, "Khoa", "Department");

const addStatus = () => addEntity(loadStatus, saveStatuses, "Tr·∫°ng th√°i", "Status");
const renameStatus = () => renameEntity(loadStatus, saveStatuses, "Tr·∫°ng th√°i", "Status");

const addProgram = () => addEntity(loadProgram, savePrograms, "Ch∆∞∆°ng tr√¨nh", "Program");
const renameProgram = () => renameEntity(loadProgram, savePrograms, "Ch∆∞∆°ng tr√¨nh", "Program");

module.exports = {
    addDepartment, renameDepartment,
    addStatus, renameStatus, changeRule,
    addProgram, renameProgram
};